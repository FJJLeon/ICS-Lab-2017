                            | #######################################################################
                            | # Test for copying block of size 67;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24300000000000000 | 	irmovq $67, %rdx		# src and dst have 67 elements
0x014: 30f69804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80fe00000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | ##################################################################
                            | # Junjie Fang  516030910006 
                            | # merge irmovq and addq to iaddq 	
                            | # 	
                            | #
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 	#iaddq $-2, %rdx
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 71fd00000000000000   | 	jle Done		# if so, goto Done:
                            | 	#jl enough
0x048:                      | Loop:
0x048: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x052: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x05c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x066: 62aa                 | 	andq %r10, %r10		# val <= 0? 
0x068: 717b00000000000000   | 	jle two		# if so, goto Npos:
0x071: c0f00100000000000000 | 	iaddq $1, %rax      # count++
0x07b:                      | two:
0x07b: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x085: 62bb                 | 	andq %r11, %r11
0x087: 719a00000000000000   | 	jle Npos
0x090: c0f00100000000000000 | 	iaddq $1, %rax      # count++
0x09a:                      | Npos:
0x09a: c0f71000000000000000 | 	iaddq $0x10, %rdi      # src++
0x0a4: c0f61000000000000000 | 	iaddq $0x10, %rsi      # dst++	
0x0ae: c0f2feffffffffffffff | 	iaddq $-2, %rdx     # len--
0x0b8: 754800000000000000   | 	jge Loop         # if so, goto Loop:
                            | 	#je Done
0x0c1:                      | enough:
0x0c1: c0f20100000000000000 | 	iaddq $1, %rdx	
0x0cb: 72fd00000000000000   | 	jl Done
0x0d4: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0de: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0e8: 62aa                 | 	andq %r10, %r10
0x0ea: 71fd00000000000000   | 	jle Done
0x0f3: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0fd:                      | Done:
0x0fd: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0fe:                      | End:
                            | #/* $end ncopy-ys */
0x0fe:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 35.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x0fe:                      | check:
                            | 	# Return value test
0x0fe: 30fa2300000000000000 | 	irmovq $35,%r10
0x108: 61a0                 | 	subq %r10,%rax
0x10a: 732601000000000000   | 	je checkb
0x113: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x11d: 706402000000000000   | 	jmp cdone
0x126:                      | checkb:
                            | 	# Code length check
0x126: 30f0fe00000000000000 | 	irmovq EndFun,%rax
0x130: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x13a: 6120                 | 	subq %rdx,%rax
0x13c: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x146: 6102                 | 	subq %rax,%rdx
0x148: 756401000000000000   | 	jge checkm
0x151: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x15b: 706402000000000000   | 	jmp cdone
0x164:                      | checkm:
0x164: 30f29804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x16e: 30f36802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x178: 30f74300000000000000 | 	irmovq $67,%rdi  # Count
0x182: 6277                 | 	andq %rdi,%rdi
0x184: 73e201000000000000   | 	je checkpre         # Skip check if count = 0
0x18d:                      | mcloop:
0x18d: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x197: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1a1: 6160                 | 	subq %rsi,%rax
0x1a3: 73bf01000000000000   | 	je  mok
0x1ac: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1b6: 706402000000000000   | 	jmp cdone
0x1bf:                      | mok:
0x1bf: 30f00800000000000000 | 	irmovq $8,%rax
0x1c9: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1cb: 6003                 | 	addq %rax,%rbx    # src++
0x1cd: 30f00100000000000000 | 	irmovq $1,%rax
0x1d7: 6107                 | 	subq %rax,%rdi    # cnt--
0x1d9: 768d01000000000000   | 	jg mcloop
0x1e2:                      | checkpre:
                            | 	# Check for corruption
0x1e2: 30f29004000000000000 | 	irmovq Predest,%rdx
0x1ec: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x1f6: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x200: 6120                 | 	subq %rdx,%rax
0x202: 731e02000000000000   | 	je checkpost
0x20b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x215: 706402000000000000   | 	jmp cdone
0x21e:                      | checkpost:
                            | 	# Check for corruption
0x21e: 30f2b006000000000000 | 	irmovq Postdest,%rdx
0x228: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x232: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x23c: 6120                 | 	subq %rdx,%rax
0x23e: 735a02000000000000   | 	je checkok
0x247: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x251: 706402000000000000   | 	jmp cdone
0x25a:                      | checkok:
                            | 	# Successful checks
0x25a: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x264:                      | cdone:
0x264: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x268:                      | 	.align 8
0x268:                      | src:
0x268: ffffffffffffffff     | 	.quad -1
0x270: feffffffffffffff     | 	.quad -2
0x278: fdffffffffffffff     | 	.quad -3
0x280: fcffffffffffffff     | 	.quad -4
0x288: fbffffffffffffff     | 	.quad -5
0x290: faffffffffffffff     | 	.quad -6
0x298: f9ffffffffffffff     | 	.quad -7
0x2a0: f8ffffffffffffff     | 	.quad -8
0x2a8: 0900000000000000     | 	.quad 9
0x2b0: f6ffffffffffffff     | 	.quad -10
0x2b8: 0b00000000000000     | 	.quad 11
0x2c0: f4ffffffffffffff     | 	.quad -12
0x2c8: f3ffffffffffffff     | 	.quad -13
0x2d0: 0e00000000000000     | 	.quad 14
0x2d8: 0f00000000000000     | 	.quad 15
0x2e0: f0ffffffffffffff     | 	.quad -16
0x2e8: 1100000000000000     | 	.quad 17
0x2f0: eeffffffffffffff     | 	.quad -18
0x2f8: 1300000000000000     | 	.quad 19
0x300: ecffffffffffffff     | 	.quad -20
0x308: ebffffffffffffff     | 	.quad -21
0x310: eaffffffffffffff     | 	.quad -22
0x318: e9ffffffffffffff     | 	.quad -23
0x320: e8ffffffffffffff     | 	.quad -24
0x328: e7ffffffffffffff     | 	.quad -25
0x330: 1a00000000000000     | 	.quad 26
0x338: 1b00000000000000     | 	.quad 27
0x340: e4ffffffffffffff     | 	.quad -28
0x348: 1d00000000000000     | 	.quad 29
0x350: e2ffffffffffffff     | 	.quad -30
0x358: 1f00000000000000     | 	.quad 31
0x360: 2000000000000000     | 	.quad 32
0x368: dfffffffffffffff     | 	.quad -33
0x370: 2200000000000000     | 	.quad 34
0x378: ddffffffffffffff     | 	.quad -35
0x380: 2400000000000000     | 	.quad 36
0x388: dbffffffffffffff     | 	.quad -37
0x390: daffffffffffffff     | 	.quad -38
0x398: 2700000000000000     | 	.quad 39
0x3a0: d8ffffffffffffff     | 	.quad -40
0x3a8: 2900000000000000     | 	.quad 41
0x3b0: d6ffffffffffffff     | 	.quad -42
0x3b8: 2b00000000000000     | 	.quad 43
0x3c0: d4ffffffffffffff     | 	.quad -44
0x3c8: 2d00000000000000     | 	.quad 45
0x3d0: d2ffffffffffffff     | 	.quad -46
0x3d8: 2f00000000000000     | 	.quad 47
0x3e0: 3000000000000000     | 	.quad 48
0x3e8: 3100000000000000     | 	.quad 49
0x3f0: 3200000000000000     | 	.quad 50
0x3f8: 3300000000000000     | 	.quad 51
0x400: 3400000000000000     | 	.quad 52
0x408: 3500000000000000     | 	.quad 53
0x410: 3600000000000000     | 	.quad 54
0x418: 3700000000000000     | 	.quad 55
0x420: c8ffffffffffffff     | 	.quad -56
0x428: c7ffffffffffffff     | 	.quad -57
0x430: 3a00000000000000     | 	.quad 58
0x438: 3b00000000000000     | 	.quad 59
0x440: 3c00000000000000     | 	.quad 60
0x448: 3d00000000000000     | 	.quad 61
0x450: 3e00000000000000     | 	.quad 62
0x458: 3f00000000000000     | 	.quad 63
0x460: c0ffffffffffffff     | 	.quad -64
0x468: 4100000000000000     | 	.quad 65
0x470: 4200000000000000     | 	.quad 66
0x478: 4300000000000000     | 	.quad 67
0x480: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x490:                      | 	.align 16
0x490:                      | Predest:
0x490: fadebc0000000000     | 	.quad 0xbcdefa
0x498:                      | dest:
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0:                      | Postdest:
0x6b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6b8:                      | .align 8
                            | # Run time stack
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
                            | 
0x738:                      | Stack:
